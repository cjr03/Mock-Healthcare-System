/* tslint:disable */
/* eslint-disable */
/**
 * Infusion Tracker API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'medication': string;
    /**
     * 
     * @type {string}
     * @memberof Appointment
     */
    'pharmacy': string;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'appointmentId': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'patientId': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'medication': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'pharmacy': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NotifyResponse
 */
export interface NotifyResponse {
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'appointmentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'medication'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'pharmacy'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotifyResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'name': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get infusion appointments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appointmentsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/appointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify pharmacy of scheduled infusion
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyPharmacyPost: async (notification: Notification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('notifyPharmacyPost', 'notification', notification)
            const localVarPath = `/notify-pharmacy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get infusion appointments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appointmentsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Appointment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appointmentsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appointmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Notify pharmacy of scheduled infusion
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifyPharmacyPost(notification: Notification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotifyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifyPharmacyPost(notification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.notifyPharmacyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Patient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patientsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get infusion appointments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appointmentsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Appointment>> {
            return localVarFp.appointmentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify pharmacy of scheduled infusion
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifyPharmacyPost(notification: Notification, options?: RawAxiosRequestConfig): AxiosPromise<NotifyResponse> {
            return localVarFp.notifyPharmacyPost(notification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Patient>> {
            return localVarFp.patientsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get infusion appointments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appointmentsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appointmentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify pharmacy of scheduled infusion
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notifyPharmacyPost(notification: Notification, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notifyPharmacyPost(notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patientsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patientsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



